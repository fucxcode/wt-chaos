import { SavePluginContext } from "./contexts/plugin-context-save";
import { Entity } from "../entities";
import { CountPluginContext } from "./contexts/plugin-context-count";
import { FindOneByIdPluginContext } from "./contexts/plugin-context-find-one-by-id";
import { FindByIdsPluginContext } from "./contexts/plugin-context-find-by-ids";
import { FindOnePluginContext } from "./contexts/plugin-context-find-one";
import { FindByPageIndexPluginContext } from "./contexts/plugin-context-find-by-page-index";
import { FindByPageNextPluginContext } from "./contexts/plugin-context-find-by-page-next";
import { UpdatePluginContext } from "./contexts/plugin-context-update";
import { UpdateByIdsPluginContext } from "./contexts/plugin-context-update-by-ids";
import { UpdateByEntityPluginContext } from "./contexts/plugin-context-update-by-entity";
import { ErasePluginContext } from "./contexts/plugin-context-erase";
import { FindOneAndUpdatePluginContext } from "./contexts/plugin-context-find-one-update";
import { FindOneAndUpdateByEntityPluginContext } from "./contexts/plugin-context-find-one-update-by-entity";
import { AggregatePluginContext } from "./contexts/plugin-context-aggregate";
import { MapReducePluginContext } from "./contexts/plugin-context-map-reduce";
import { UpdateByIdPluginContext } from "./contexts/plugin-context-update-by-id";
import { Session } from "../drivers";
declare abstract class Plugin {
    private _name;
    readonly name: string;
    constructor(name: string);
    beforeSave<T extends Entity, TSession extends Session>(context: SavePluginContext<T, TSession>): Promise<void>;
    afterSave<T extends Entity, TSession extends Session>(context: SavePluginContext<T, TSession>): Promise<void>;
    beforeCount<TSession extends Session>(context: CountPluginContext<TSession>): Promise<void>;
    afterCount<TSession extends Session>(context: CountPluginContext<TSession>): Promise<void>;
    beforeFindOne<T extends Entity, TSession extends Session>(context: FindOnePluginContext<T, TSession>): Promise<void>;
    afterFindOne<T extends Entity, TSession extends Session>(context: FindOnePluginContext<T, TSession>): Promise<void>;
    beforeFindOneById<T extends Entity, TSession extends Session>(context: FindOneByIdPluginContext<T, TSession>): Promise<void>;
    afterFindOneById<T extends Entity, TSession extends Session>(context: FindOneByIdPluginContext<T, TSession>): Promise<void>;
    beforeFindByIds<T extends Entity, TSession extends Session>(context: FindByIdsPluginContext<T, TSession>): Promise<void>;
    afterFindByIds<T extends Entity, TSession extends Session>(context: FindByIdsPluginContext<T, TSession>): Promise<void>;
    beforeFindByPageIndex<T extends Entity, TSession extends Session>(context: FindByPageIndexPluginContext<T, TSession>): Promise<void>;
    afterFindByPageIndex<T extends Entity, TSession extends Session>(context: FindByPageIndexPluginContext<T, TSession>): Promise<void>;
    beforeFindByPageNext<T extends Entity, TSession extends Session>(context: FindByPageNextPluginContext<T, TSession>): Promise<void>;
    afterFindByPageNext<T extends Entity, TSession extends Session>(context: FindByPageNextPluginContext<T, TSession>): Promise<void>;
    beforeUpdate<TSession extends Session>(context: UpdatePluginContext<TSession>): Promise<void>;
    afterUpdate<TSession extends Session>(context: UpdatePluginContext<TSession>): Promise<void>;
    beforeUpdateById<TSession extends Session>(context: UpdateByIdPluginContext<TSession>): Promise<void>;
    afterUpdateById<TSession extends Session>(context: UpdateByIdPluginContext<TSession>): Promise<void>;
    beforeUpdateByIds<TSession extends Session>(context: UpdateByIdsPluginContext<TSession>): Promise<void>;
    afterUpdateByIds<TSession extends Session>(context: UpdateByIdsPluginContext<TSession>): Promise<void>;
    beforeUpdateByEntity<T extends Entity, TSession extends Session>(context: UpdateByEntityPluginContext<T, TSession>): Promise<void>;
    afterUpdateByEntity<T extends Entity, TSession extends Session>(context: UpdateByEntityPluginContext<T, TSession>): Promise<void>;
    beforeErase<TSession extends Session>(context: ErasePluginContext<TSession>): Promise<void>;
    afterErase<TSession extends Session>(context: ErasePluginContext<TSession>): Promise<void>;
    beforeFindOneAndUpdate<T extends Entity, TSession extends Session>(context: FindOneAndUpdatePluginContext<T, TSession>): Promise<void>;
    afterFindOneAndUpdate<T extends Entity, TSession extends Session>(context: FindOneAndUpdatePluginContext<T, TSession>): Promise<void>;
    beforeFindOneAndUpdateByEntity<T extends Entity, TSession extends Session>(context: FindOneAndUpdateByEntityPluginContext<T, TSession>): Promise<void>;
    afterFindOneAndUpdateByEntity<T extends Entity, TSession extends Session>(context: FindOneAndUpdateByEntityPluginContext<T, TSession>): Promise<void>;
    beforeAggregate<T, TSession extends Session>(context: AggregatePluginContext<T, TSession>): Promise<void>;
    afterAggregate<T, TSession extends Session>(context: AggregatePluginContext<T, TSession>): Promise<void>;
    beforeMapReduce<T, TSession extends Session>(context: MapReducePluginContext<T, TSession>): Promise<void>;
    afterMapReduce<T, TSession extends Session>(context: MapReducePluginContext<T, TSession>): Promise<void>;
}
export { Plugin };
